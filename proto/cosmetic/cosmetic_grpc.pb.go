// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/cosmetic/cosmetic.proto

package cosmetic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CosmeticService_DeleteCosmetic_FullMethodName = "/cosmetic.CosmeticService/deleteCosmetic"
	CosmeticService_UpdateCosmetic_FullMethodName = "/cosmetic.CosmeticService/updateCosmetic"
	CosmeticService_CreateCosmetic_FullMethodName = "/cosmetic.CosmeticService/createCosmetic"
	CosmeticService_ListCosmetics_FullMethodName  = "/cosmetic.CosmeticService/ListCosmetics"
)

// CosmeticServiceClient is the client API for CosmeticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CosmeticServiceClient interface {
	// Sends a greeting
	DeleteCosmetic(ctx context.Context, in *DeleteCosmeticRequest, opts ...grpc.CallOption) (*DeleteCosmeticReply, error)
	UpdateCosmetic(ctx context.Context, in *UpdateCosmeticRequest, opts ...grpc.CallOption) (*UpdateCosmeticReply, error)
	CreateCosmetic(ctx context.Context, in *CreateCosmeticRequest, opts ...grpc.CallOption) (*CreateCosmeticResponse, error)
	// Sends another greeting
	ListCosmetics(ctx context.Context, in *ListCosmeticsRequest, opts ...grpc.CallOption) (*ListCosmeticsResponse, error)
}

type cosmeticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCosmeticServiceClient(cc grpc.ClientConnInterface) CosmeticServiceClient {
	return &cosmeticServiceClient{cc}
}

func (c *cosmeticServiceClient) DeleteCosmetic(ctx context.Context, in *DeleteCosmeticRequest, opts ...grpc.CallOption) (*DeleteCosmeticReply, error) {
	out := new(DeleteCosmeticReply)
	err := c.cc.Invoke(ctx, CosmeticService_DeleteCosmetic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosmeticServiceClient) UpdateCosmetic(ctx context.Context, in *UpdateCosmeticRequest, opts ...grpc.CallOption) (*UpdateCosmeticReply, error) {
	out := new(UpdateCosmeticReply)
	err := c.cc.Invoke(ctx, CosmeticService_UpdateCosmetic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosmeticServiceClient) CreateCosmetic(ctx context.Context, in *CreateCosmeticRequest, opts ...grpc.CallOption) (*CreateCosmeticResponse, error) {
	out := new(CreateCosmeticResponse)
	err := c.cc.Invoke(ctx, CosmeticService_CreateCosmetic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosmeticServiceClient) ListCosmetics(ctx context.Context, in *ListCosmeticsRequest, opts ...grpc.CallOption) (*ListCosmeticsResponse, error) {
	out := new(ListCosmeticsResponse)
	err := c.cc.Invoke(ctx, CosmeticService_ListCosmetics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CosmeticServiceServer is the server API for CosmeticService service.
// All implementations must embed UnimplementedCosmeticServiceServer
// for forward compatibility
type CosmeticServiceServer interface {
	// Sends a greeting
	DeleteCosmetic(context.Context, *DeleteCosmeticRequest) (*DeleteCosmeticReply, error)
	UpdateCosmetic(context.Context, *UpdateCosmeticRequest) (*UpdateCosmeticReply, error)
	CreateCosmetic(context.Context, *CreateCosmeticRequest) (*CreateCosmeticResponse, error)
	// Sends another greeting
	ListCosmetics(context.Context, *ListCosmeticsRequest) (*ListCosmeticsResponse, error)
	mustEmbedUnimplementedCosmeticServiceServer()
}

// UnimplementedCosmeticServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCosmeticServiceServer struct {
}

func (UnimplementedCosmeticServiceServer) DeleteCosmetic(context.Context, *DeleteCosmeticRequest) (*DeleteCosmeticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCosmetic not implemented")
}
func (UnimplementedCosmeticServiceServer) UpdateCosmetic(context.Context, *UpdateCosmeticRequest) (*UpdateCosmeticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCosmetic not implemented")
}
func (UnimplementedCosmeticServiceServer) CreateCosmetic(context.Context, *CreateCosmeticRequest) (*CreateCosmeticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCosmetic not implemented")
}
func (UnimplementedCosmeticServiceServer) ListCosmetics(context.Context, *ListCosmeticsRequest) (*ListCosmeticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCosmetics not implemented")
}
func (UnimplementedCosmeticServiceServer) mustEmbedUnimplementedCosmeticServiceServer() {}

// UnsafeCosmeticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CosmeticServiceServer will
// result in compilation errors.
type UnsafeCosmeticServiceServer interface {
	mustEmbedUnimplementedCosmeticServiceServer()
}

func RegisterCosmeticServiceServer(s grpc.ServiceRegistrar, srv CosmeticServiceServer) {
	s.RegisterService(&CosmeticService_ServiceDesc, srv)
}

func _CosmeticService_DeleteCosmetic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCosmeticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosmeticServiceServer).DeleteCosmetic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CosmeticService_DeleteCosmetic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosmeticServiceServer).DeleteCosmetic(ctx, req.(*DeleteCosmeticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CosmeticService_UpdateCosmetic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCosmeticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosmeticServiceServer).UpdateCosmetic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CosmeticService_UpdateCosmetic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosmeticServiceServer).UpdateCosmetic(ctx, req.(*UpdateCosmeticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CosmeticService_CreateCosmetic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCosmeticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosmeticServiceServer).CreateCosmetic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CosmeticService_CreateCosmetic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosmeticServiceServer).CreateCosmetic(ctx, req.(*CreateCosmeticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CosmeticService_ListCosmetics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCosmeticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosmeticServiceServer).ListCosmetics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CosmeticService_ListCosmetics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosmeticServiceServer).ListCosmetics(ctx, req.(*ListCosmeticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CosmeticService_ServiceDesc is the grpc.ServiceDesc for CosmeticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CosmeticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmetic.CosmeticService",
	HandlerType: (*CosmeticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "deleteCosmetic",
			Handler:    _CosmeticService_DeleteCosmetic_Handler,
		},
		{
			MethodName: "updateCosmetic",
			Handler:    _CosmeticService_UpdateCosmetic_Handler,
		},
		{
			MethodName: "createCosmetic",
			Handler:    _CosmeticService_CreateCosmetic_Handler,
		},
		{
			MethodName: "ListCosmetics",
			Handler:    _CosmeticService_ListCosmetics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cosmetic/cosmetic.proto",
}
